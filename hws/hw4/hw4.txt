Add your answers to Problems 1 and 2 to this file. 
Don't forget to commit your answers when you are done!


________________________________________________
Problem 1(a)
Because the opertions performed by Combiners and Reducers are identical in WordCount problem. Also, summation is commutative and associative.

There are a lot of cases where we cannot use the Reducer as Combiner. 
For example, the operation of Reducer is to find the median of word length:

Without Combiner:
Reducer input:
a [1, 1, 2, 3, 4, 4, 5]
Reducer output:
a 3

With Combiner:
Possible Combiner input:
a [1, 1, 2]
a [3, 4, 4]
a [5]
Possible Combiner output:
a 1
a 4
a 5
Reducer input:
a [1, 4, 5]
Reducer output:
a 4



________________________________________________
Problem 1(b)
Add following statement in Driver class:
job.setCombinerClass(SumReducer.class);

The result of job execution does not change compared to the original WordCount computation.



________________________________________________
Problem 1(c)
# Statistics:
Word Count with Combiner:
                        	Map         	Reducer     	Total
Number of bytes read:   	827,879     	923,119     	1,750,998
Number of bytes written:	2,517,376   	1,114,285   	3,631,661
Map output records:     	964,453     	0           	964,453
Combine input records:  	964,453     	0           	964,453
Combine output records: 	68,152      	0           	68,152
Reduce input groups:    	0           	29,183      	29,183
Reduce input records:   	0           	68,152      	68,152


Word Count without Combiner:
                        	Map         	Reducer     	Total       	Residual
Number of bytes read:   	10,154,450  	10,713,042  	20,867,492  	19,116,494
Number of bytes written:	21,631,758  	10,903,680  	32,535,438  	28,903,777
Map output records:     	964,453     	0           	964,453     	0
Combine input records:  	0           	0           	0           	-964,453
Combine output records: 	0           	0           	0           	-68,152
Reduce input groups:    	0           	29,183      	29,183      	0
Reduce input records:   	0           	964,453     	964,453     	896,301

964,453 key-value pairs could be combined using the Combiner.



________________________________________________
Problem 1(d)
Word Count without Combiner:
                                    	Map             	Reducer         	Total
CPU time spent (ms):                	15,890          	13,530          	29,420
Physical memory (bytes) snapshot:   	884,473,856     	122,822,656     	1,007,296,512


Word Count with Combiner:
                                    	Map             	Reducer         	Total
CPU time spent (ms):                	18,900          	10,470          	29,370
Physical memory (bytes) snapshot:   	904,863,744     	115,638,272     	1,020,502,016


The use of a Combiner is inevitable when MapReduce jobs are limited by the bandwidth available on the cluster. A Combiner avoids large amounts of intermediate data produced by Mappers to speed up data transfer to Reducers.
I would not say it is a good or bad idea to use a Combiner for counting the words in the Shakespeare data. They have same orders of magnitude whether the program use a Combiner or not. Since the program is running on pseudo-cluster, only one node is used. There is no actual data transferring between nodes. Instead of speeding up the job, the combiner just plays a role of mini-reducer. It reduces the result of Mapper before the actual Reducer does. The reduce job done by the Combiner seems to be extra in this case, but it also does not hurt.

If total time spent for the Mappers is higher when using a Combiner, because the Combiner needs to run reduce job during map phrase. (Total time spent is actually less in my observations.)

________________________________________________
________________________________________________
Problem 2(c)

positive = 405
negative = 805
neutral  = 5215

sentiment score:
s = (positive - negative) / (postitive + negative)
  = (405 - 805) / (405 + 805)
  = -0.3306

positivity score:
p = positive / (positive + negative)
  = 405 / (405 + 805)
  = 0.3347
