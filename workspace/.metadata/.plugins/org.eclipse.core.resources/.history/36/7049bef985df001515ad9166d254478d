package stubs;

import java.io.IOException;

import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.SequenceFile.CompressionType;
import org.apache.hadoop.io.compress.SnappyCodec;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;


public class CreateSequenceFile extends Configured implements Tool {

@Override
  public int run(String[] args) throws Exception {

    if (args.length != 2) {
      System.out.printf("Usage: CreateSequenceFile <input dir> <output dir>\n");
      return -1;
    }

    Configuration conf = getConf();
    
    Job job = Job.getInstance(conf);
    job.setJarByClass(CreateSequenceFile.class);
    job.setJobName("Create Sequence File");

    /*
     * TODO implement
     */
    
    Path inPath = new Path(args[0]);
    Path outPath = new Path(args[1]);
    
	FileInputFormat.setInputPaths(job,  inPath);
	FileOutputFormat.setOutputPath(job, outPath);
	
	job.setMapperClass(SEQMapper.class);
	job.setOutputKeyClass(Text.class);
	job.setOutputValueClass(Text.class);
//	job.setNumReduceTasks(0);
	
	job.setOutputFormatClass(SequenceFileOutputFormat.class);

	FileOutputFormat.setCompressOutput(job, true);
	FileOutputFormat.setOutputCompressorClass(job, SnappyCodec.class);
	
	SequenceFileOutputFormat.setOutputCompressionType(job, CompressionType.BLOCK);
	

    
    boolean success = job.waitForCompletion(true);
    return success ? 0 : 1;
  }

  public static void main(String[] args) throws Exception {
    int exitCode = ToolRunner.run(new Configuration(), new CreateSequenceFile(), args);
    System.exit(exitCode);
  }
  
  private static class SEQMapper extends Mapper<LongWritable, Text, Text, Text> {
	  private static Text seqkey = new Text();
	  private static int line_num = 0;
	  
	  public void map(LongWritable key, Text value, Context context) 
	  throws IOException, InterruptedException{
		  
		  seqkey.set(key.get() + " | " + line_num++);
		  context.write(seqkey, value);
	  }
  }
  
}
